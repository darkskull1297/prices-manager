/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.zara.spring.java.api;

import com.zara.spring.java.dto.ErrorsDTO;
import com.zara.spring.java.dto.InlineResponse200DTO;
import java.time.OffsetDateTime;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-19T19:47:32.501025700+02:00[Europe/Madrid]")
@Validated
public interface PriceManagerApi {

    @Operation(summary = "Retrieve a price by date product id and brand id.", description = "Retrieve a price by date product id and brand id.", tags={ "Price Manager" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200DTO.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content success status response. Request has succeeded but 0 elements found with this filter"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorsDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorsDTO.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorsDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorsDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorsDTO.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorsDTO.class))),
        
        @ApiResponse(responseCode = "504", description = "Gateway timeout", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorsDTO.class))) })
    @RequestMapping(value = "/api/price",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200DTO> retrievePriceByParameters(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Product Id. " ,required=true,schema=@Schema()) @Valid @RequestParam(value = "productId", required = true) Integer productId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Brand Id. " ,required=true,schema=@Schema()) @Valid @RequestParam(value = "brandId", required = true) Integer brandId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Date of the price what ypu want to get. The value uses the complete data format defined in ISO 8601:'YYYY-mm-DDTHH:MM:SS'  Where: - YYYY: 4-digit year - mm: 2-digit month (for example, 01 = January) - DD: 2-digit day of the month (01 through 31) - HH: Hour, from 00 to 23 - MM: Minutes, from 00 to 59 - SS: Seconds, from 00 to 59." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "date", required = true) OffsetDateTime date);

}

